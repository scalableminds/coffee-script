(function() {
  var Arr, Block, Call, Code, Comment, Literal, Param, Value, _ref;

  _ref = require("./nodes"), Block = _ref.Block, Comment = _ref.Comment, Literal = _ref.Literal, Param = _ref.Param, Code = _ref.Code, Arr = _ref.Arr, Value = _ref.Value, Call = _ref.Call;

  module.exports = function(mainNode) {
    var defineBlock, node;
    defineBlock = null;
    mainNode.eachChild(function(node) {
      var match, matches, pair, _i, _len, _results;
      if (node.constructor.name === "Comment" && /^\s*define/gm.test(node.comment)) {
        if (matches = node.comment.match(/\s*([^\"\n\s\:]+)\s*:\s*([^\"\n\s\:]+)\s*/gm)) {
          defineBlock = {
            sources: [],
            targets: [],
            node: node
          };
          _results = [];
          for (_i = 0, _len = matches.length; _i < _len; _i++) {
            match = matches[_i];
            if (pair = match.match(/\s*([^\"\n\s\:]+)\s*:\s*([^\"\n\s\:]+)\s*/m)) {
              defineBlock.sources.push(pair[1]);
              _results.push(defineBlock.targets.push(pair[2]));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }
    });
    if (defineBlock) {
      if (mainNode.expressions.indexOf(defineBlock.node) >= 0) {
        mainNode.expressions = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = mainNode.expressions;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            node = _ref1[_i];
            if (node !== defineBlock.node) {
              _results.push(node);
            }
          }
          return _results;
        })();
      }
      mainNode = new Block([
        new Call(new Value(new Literal("define")), [
          new Arr(defineBlock.sources.map(function(a) {
            return new Value(new Literal("\"" + a + "\""));
          })), new Code(defineBlock.targets.map(function(a) {
            return new Param(new Literal(a));
          }), mainNode)
        ])
      ]);
    }
    return mainNode;
  };

}).call(this);

// Generated by CoffeeScript 1.5.0-pre
